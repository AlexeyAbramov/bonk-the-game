{"version":3,"sources":["Cell.jsx","App.js","index.js"],"names":["Cell","props","box","currentBox","console","log","className","onClick","plusScore","Board","state","board","time","timeleft","dashbord","score","isPlaying","startGame","bind","this","setState","updateTimer","moveCell","updTimer","setInterval","endGame","clearInterval","mCell","Math","floor","random","push","setTimeout","map","i","index","item","React","Component","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"8OAWeA,EAXF,SAACC,GAAW,IACfC,EAAoBD,EAApBC,IAAKC,EAAeF,EAAfE,WAEb,OADAC,QAAQC,IAAIJ,GAEV,qBACEK,UAAS,eAAUH,IAAeD,EAAM,OAAS,IACjDK,QAASJ,IAAeD,EAAMD,EAAMO,UAAY,QCgGvCC,E,kDAlGb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCR,WAAY,EACZS,KAAM,GACNC,SAAU,KACVC,SAAU,GACVC,MAAO,EACPC,WAAW,GAEb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKV,UAAY,EAAKA,UAAUU,KAAf,gBAZA,E,6CAcnB,WACEC,KAAKC,SAAS,CAAEJ,WAAW,IAC3BG,KAAKE,cACLF,KAAKG,a,yBAEP,WAAe,IAAD,OACRT,EAAWM,KAAKT,MAAME,KACtBW,EAAWC,aAAY,WAER,KADjBX,EAAW,EAAKH,MAAMG,SAAW,KAE/B,EAAKY,UACLC,cAAcH,IAEhB,EAAKH,SAAS,CAAEP,eACf,KACH,OAAOM,KAAKC,SAAS,CAAEP,e,sBAEzB,WAAY,IAAD,OACLc,EAAQH,aAAY,WACtB,IAAIrB,EAAa,EAAKO,MAAMC,MAAMiB,KAAKC,MAAsB,EAAhBD,KAAKE,WAClD,EAAKV,SAAS,CAAEjB,eACY,IAAxB,EAAKO,MAAMG,UACba,cAAcC,KAEf,O,qBAEL,WAAW,IAAD,OACJb,EAAQ,YAAOK,KAAKT,MAAMI,UAC1BC,EAAQI,KAAKT,MAAMK,MACvBD,EAASiB,KAAKhB,GACdI,KAAKC,SAAS,CAAEJ,WAAW,EAAOF,WAAUC,MAAO,IACnDiB,YAAW,WACT,EAAKZ,SAAS,CAAEjB,WAAY,MAC3B,O,uBAEL,WACEgB,KAAKC,SAAS,CAAEL,MAAOI,KAAKT,MAAMK,MAAQ,M,oBAG5C,WAAU,IAAD,SACkDI,KAAKT,MAAtDC,EADD,EACCA,MAAOR,EADR,EACQA,WAAYU,EADpB,EACoBA,SAAUC,EAD9B,EAC8BA,SAAUC,EADxC,EACwCA,MAE/C,OACE,sBAAKT,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAIA,UAAU,OAAd,6CAA6BO,OAE/B,qBAAKP,UAAU,WAAf,SACE,qBAAIA,UAAU,OAAd,uCAA4BS,UAGhC,sBAAKT,UAAU,OAAf,UACE,qBAAKA,UAAU,UAAf,SACGK,EAAMsB,KAAI,SAACC,EAAGC,GAAJ,OACT,cAAC,EAAD,CAEEA,MAAOA,EACPjC,IAAKgC,EACL/B,WAAYA,EACZK,UAAW,EAAKA,WAJX0B,QAQVf,KAAKT,MAAMI,UACV,qBAAKR,UAAU,WAAf,SACGQ,EAASmB,KAAI,SAACG,EAAMD,GAAP,OACZ,mBAAG7B,UAAU,QAAb,4CACE6B,EAAQ,EADV,uCAEWC,IAFeD,YAQhChB,KAAKT,MAAMM,WACX,wBAAQV,UAAU,SAASC,QAASY,KAAKF,UAAzC,yD,GA3FUoB,IAAMC,WCE1BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.835d6210.chunk.js","sourcesContent":["const Cell = (props) => {\r\n  const { box, currentBox } = props;\r\n  console.log(props);\r\n  return (\r\n    <div\r\n      className={`cell ${currentBox === box ? \"mole\" : \"\"}`}\r\n      onClick={currentBox === box ? props.plusScore : null}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n      currentBox: 0,\n      time: 30,\n      timeleft: null,\n      dashbord: [],\n      score: 0,\n      isPlaying: false,\n    };\n    this.startGame = this.startGame.bind(this);\n    this.plusScore = this.plusScore.bind(this);\n  }\n  startGame() {\n    this.setState({ isPlaying: true });\n    this.updateTimer();\n    this.moveCell();\n  }\n  updateTimer() {\n    let timeleft = this.state.time;\n    let updTimer = setInterval(() => {\n      timeleft = this.state.timeleft - 1;\n      if (timeleft === 0) {\n        this.endGame();\n        clearInterval(updTimer);\n      }\n      this.setState({ timeleft });\n    }, 1000);\n    return this.setState({ timeleft });\n  }\n  moveCell() {\n    let mCell = setInterval(() => {\n      let currentBox = this.state.board[Math.floor(Math.random() * 9)];\n      this.setState({ currentBox });\n      if (this.state.timeleft === 0) {\n        clearInterval(mCell);\n      }\n    }, 400);\n  }\n  endGame() {\n    let dashbord = [...this.state.dashbord];\n    let score = this.state.score;\n    dashbord.push(score);\n    this.setState({ isPlaying: false, dashbord, score: 0 });\n    setTimeout(() => {\n      this.setState({ currentBox: 0 });\n    }, 500);\n  }\n  plusScore() {\n    this.setState({ score: this.state.score + 1 });\n  }\n\n  render() {\n    const { board, currentBox, timeleft, dashbord, score } = this.state;\n\n    return (\n      <div className=\"main\">\n        <div className=\"heading\">\n          <div className=\"time\">\n            <h2 className=\"text\">Время: {timeleft}</h2>\n          </div>\n          <div className=\"dashbord\">\n            <h2 className=\"text\">Счет: {score}</h2>\n          </div>\n        </div>\n        <div className=\"game\">\n          <div className=\"wrapper\">\n            {board.map((i, index) => (\n              <Cell\n                key={i}\n                index={index}\n                box={i}\n                currentBox={currentBox}\n                plusScore={this.plusScore}\n              />\n            ))}\n          </div>\n          {this.state.dashbord && (\n            <div className=\"dashbord\">\n              {dashbord.map((item, index) => (\n                <p className=\"score\" key={index}>{`Счёт ${\n                  index + 1\n                } игры : ${item}`}</p>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {!this.state.isPlaying && (\n          <button className=\"button\" onClick={this.startGame}>\n            Играть\n          </button>\n        )}\n      </div>\n    );\n  }\n}\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}